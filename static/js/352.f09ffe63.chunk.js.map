{"version":3,"file":"static/js/352.f09ffe63.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/findCharForm/FindCharForm.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}\r\n            src={img}\r\n            alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n\tconst [char, setChar] = useState([]);\n\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t}, []);\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t};\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded);\n\t};\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst content = !(loading || error) ? <View char={char}/> : null\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!\n\t\t\t\t\t<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">Or choose another one</p>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst View = ({ char }) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n\tlet styled = {};\n\n\tif (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n\t\tstyled = {objectFit: 'contain'}\n\t} else {\n\t\tstyled = {objectFit: 'cover'}\n\t}\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img style={styled}\n\t\t\t\tsrc={thumbnail} \n\t\t\t\talt=\"Random character\" \n\t\t\t\tclassName=\"randomchar__img\" />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">{description}</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RandomChar;","import './findCharForm.scss';\r\n\r\nimport { Formik, Form, Field, ErrorMessage as ErrorMessageFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst FindCharForm = () => {\r\n\r\n    const [char, setChar] = useState(null)\r\n    const {loading, getCharacterByName, clearError, error} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n\t\tclearError();\r\n\t\tgetCharacterByName(name)\r\n\t\t\t.then(onCharLoaded);\r\n\t};\r\n\r\n\r\n    const errorMessage = error ? <div className='char__search-critical-error'><ErrorMessage/></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/MarvelPortal/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> : \r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\treturn (\r\n\t\t<>\r\n            <div className=\"char__search-form\">\r\n                <Formik\r\n                    initialValues={{\r\n                        charName: ''\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                        charName: Yup.string()\r\n                                    .required('This field is required')\r\n                    })}\r\n                    onSubmit={({charName}) => {\r\n                        updateChar(charName)\r\n                    }}\r\n                    >\r\n                    \r\n                        <Form>\r\n                            <label className=\"char__search-label\" htmlFor=\"charName\">\r\n                                Or find a character by name:\r\n                            </label>\r\n                            <div className=\"char__search-wrapper\">\r\n                                <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\r\n                                <button type=\"submit\" className=\"button button__main\" disabled={loading}>\r\n                                    <div className=\"inner\">find</div>\r\n                                </button>\r\n                            </div>\r\n                            <ErrorMessageFormik component='div' className='char__search-error' name='charName'/>\r\n                        </Form>\r\n                </Formik>\r\n                {errorMessage}\r\n                {results}\r\n            </div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default FindCharForm;\r\n","import './charList.scss';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharList = (props) => {\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(309);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\tconst { loading, error, getAllCharacters } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, []);\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\n\t\tgetAllCharacters(offset).then(onCharListLoaded);\n\t};\n\n\tconst onCharListLoaded = (newCharList) => {\n\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\n\t\tsetCharList((charList) => [...charList, ...newCharList]);\n\t\tsetNewItemLoading(false);\n\t\tsetOffset((offset) => offset + 9);\n\t\tsetCharEnded(ended);\n\t};\n\tconst itemRefs = useRef([]);\n\n\tconst addActiveClass = (id) => {\n\t\titemRefs.current.forEach((item) => {\n\t\t\titem.classList.remove('char__item_selected');\n\t\t});\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t};\n\n\tfunction renderItems(data) {\n\t\tconst elems = data.map((item, i) => {\n\t\t\tlet styled = { objectFit: 'cover' };\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\tstyled = { objectFit: 'unset' };\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<CSSTransition key={item.id} timeout={600} classNames=\"char__item\">\n\t\t\t\t\t<a href=\"#charContent\" ref={(el) => (itemRefs.current[i] = el)}>\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\t\taddActiveClass(i);\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={styled} />\n\t\t\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</a>\n\t\t\t\t</CSSTransition>\n\t\t\t);\n\t\t});\n\n\t\treturn  <ul className=\"char__grid\">\n\t\t\t\t\t<TransitionGroup component={null}>\n\t\t\t\t\t\t{elems}\n\t\t\t\t\t</TransitionGroup>\n\t\t\t\t</ul>;\n\t}\n\tconst items = renderItems(charList);\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items}\n\n\t\t\t<button \n                className=\"button button__main button__long\" \n                disabled={newItemLoading} \n                style={{ display: charEnded ? 'none' : 'block' }} \n                onClick={() => onRequest(offset)}>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nconst  CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    \n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n\t\tupdateChar();\n    }, [props.charId])\n\n\tconst updateChar = () => {\n\t\tconst { charId } = props;\n\t\tif (!charId) {\n\t\t\treturn;\n\t\t}\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n\t};\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n\t};\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n}\n\nconst View = ({ char }) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let styled = {};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n\t\tstyled = {objectFit: 'contain'}\n\t} else {\n\t\tstyled = {objectFit: 'cover'}\n\t}\n\treturn (\n        <>\n            <div className=\"char__basics\">\n                <img style={styled} src={thumbnail} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i)=> {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n};\n\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import React, { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <ErrorMessage/>\r\n            )\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport FindCharForm from '../findCharForm/FindCharForm';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\tconst [selectedChar, setChar] = useState(null);\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetChar(id);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<meta name=\"description\" content=\"Marvel information portal\" />\r\n\t\t\t\t<title>Marvel information portal</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div id=\"charContent\" className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<FindCharForm />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default MainPage;\r\n","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, error, request, clearError} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=8b8f3cb22c233f1f1fd35d9e651796d1';\r\n\tconst _baseOffset = 309;\r\n\tconst _comicsOffset = 10000\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n\t};\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = _comicsOffset) => {\r\n\t\tconst res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n\t};\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: !char.description ? 'we dont have data about this character' : char.description.length >= 210 ? `${char.description.slice(0, 210)}...` : char.description,\r\n\t\t\tthumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n\t\t\thompage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t};\r\n\t};\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price + '$'}` : `NOT AVAILABLE`,\r\n\t\t\tthumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us',\r\n\t\t};\r\n\t};\r\n\r\n\treturn {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","styled","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","getCharacterByName","results","length","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","disabled","component","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","items","data","elems","map","item","i","CSSTransition","timeout","classNames","ref","el","current","onCharSelected","forEach","classList","remove","add","TransitionGroup","renderItems","comics","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","selectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","hompage","urls","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}
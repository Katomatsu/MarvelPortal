{"version":3,"file":"static/js/728.d900c74c.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n\tconst [char, setChar] = useState([]);\n\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t}, []);\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t};\n\n\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded);\n\t};\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst content = !(loading || error) ? <View char={char}/> : null\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!\n\t\t\t\t\t<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">Or choose another one</p>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst View = ({ char }) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n\tlet styled = {};\n\n\tif (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n\t\tstyled = {objectFit: 'contain'}\n\t} else {\n\t\tstyled = {objectFit: 'cover'}\n\t}\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img style={styled}\n\t\t\t\tsrc={thumbnail} \n\t\t\t\talt=\"Random character\" \n\t\t\t\tclassName=\"randomchar__img\" />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">{description}</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default RandomChar;","import './charList.scss';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharList = (props) => {\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(309);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\tconst { loading, error, getAllCharacters } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, []);\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\n\t\tgetAllCharacters(offset).then(onCharListLoaded);\n\t};\n\n\tconst onCharListLoaded = (newCharList) => {\n\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\n\t\tsetCharList((charList) => [...charList, ...newCharList]);\n\t\tsetNewItemLoading(false);\n\t\tsetOffset((offset) => offset + 9);\n\t\tsetCharEnded(ended);\n\t};\n\tconst itemRefs = useRef([]);\n\n\tconst addActiveClass = (id) => {\n\t\titemRefs.current.forEach((item) => {\n\t\t\titem.classList.remove('char__item_selected');\n\t\t});\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t};\n\n\tfunction renderItems(data) {\n\t\tconst elems = data.map((item, i) => {\n\t\t\tlet styled = { objectFit: 'cover' };\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\tstyled = { objectFit: 'unset' };\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<li\n\t\t\t\t\tref={(el) => (itemRefs.current[i] = el)}\n\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\taddActiveClass(i);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={styled} />\n\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\n\t\treturn <ul className=\"char__grid\">{elems}</ul>;\n\t}\n\tconst items = renderItems(charList);\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items}\n\n\t\t\t<button \n                className=\"button button__main button__long\" \n                disabled={newItemLoading} \n                style={{ display: charEnded ? 'none' : 'block' }} \n                onClick={() => onRequest(offset)}>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nconst  CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    \n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n\t\tupdateChar();\n    }, [props.charId])\n\n\tconst updateChar = () => {\n\t\tconst { charId } = props;\n\t\tif (!charId) {\n\t\t\treturn;\n\t\t}\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n\t};\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n\t};\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n}\n\nconst View = ({ char }) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let styled = {};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n\t\tstyled = {objectFit: 'contain'}\n\t} else {\n\t\tstyled = {objectFit: 'cover'}\n\t}\n\treturn (\n        <>\n            <div className=\"char__basics\">\n                <img style={styled} src={thumbnail} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i)=> {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n};\n\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import React, { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <ErrorMessage/>\r\n            )\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetChar(id);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default MainPage;"],"names":["View","char","name","description","thumbnail","homepage","wiki","styled","objectFit","className","style","src","alt","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","items","data","elems","map","item","i","ref","el","current","onCharSelected","forEach","classList","remove","add","renderItems","disabled","display","comics","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","selectedChar","decoration"],"sourceRoot":""}